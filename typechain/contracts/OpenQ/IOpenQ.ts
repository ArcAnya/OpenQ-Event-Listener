/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IOpenQInterface extends utils.Interface {
  functions: {};

  events: {
    "BountyClosed(string,address,string,address,uint256,string)": EventFragment;
    "BountyCreated(string,string,address,address,uint256)": EventFragment;
    "DepositExtended(bytes32,uint256)": EventFragment;
    "DepositRefunded(bytes32,string,address,string,uint256)": EventFragment;
    "NFTDepositReceived(bytes32,address,string,string,address,uint256,address,uint256,uint256)": EventFragment;
    "TokenBalanceClaimed(string,address,string,address,uint256,address,uint256)": EventFragment;
    "TokenDepositReceived(bytes32,address,string,string,address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BountyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BountyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTDepositReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBalanceClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDepositReceived"): EventFragment;
}

export interface BountyClosedEventObject {
  bountyId: string;
  bountyAddress: string;
  organization: string;
  closer: string;
  bountyClosedTime: BigNumber;
  closerData: string;
}
export type BountyClosedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  BountyClosedEventObject
>;

export type BountyClosedEventFilter = TypedEventFilter<BountyClosedEvent>;

export interface BountyCreatedEventObject {
  bountyId: string;
  organization: string;
  issuerAddress: string;
  bountyAddress: string;
  bountyMintTime: BigNumber;
}
export type BountyCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  BountyCreatedEventObject
>;

export type BountyCreatedEventFilter = TypedEventFilter<BountyCreatedEvent>;

export interface DepositExtendedEventObject {
  depositId: string;
  newExpiration: BigNumber;
}
export type DepositExtendedEvent = TypedEvent<
  [string, BigNumber],
  DepositExtendedEventObject
>;

export type DepositExtendedEventFilter = TypedEventFilter<DepositExtendedEvent>;

export interface DepositRefundedEventObject {
  depositId: string;
  bountyId: string;
  bountyAddress: string;
  organization: string;
  refundTime: BigNumber;
}
export type DepositRefundedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  DepositRefundedEventObject
>;

export type DepositRefundedEventFilter = TypedEventFilter<DepositRefundedEvent>;

export interface NFTDepositReceivedEventObject {
  depositId: string;
  bountyAddress: string;
  bountyId: string;
  organization: string;
  tokenAddress: string;
  receiveTime: BigNumber;
  sender: string;
  expiration: BigNumber;
  tokenId: BigNumber;
}
export type NFTDepositReceivedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  NFTDepositReceivedEventObject
>;

export type NFTDepositReceivedEventFilter =
  TypedEventFilter<NFTDepositReceivedEvent>;

export interface TokenBalanceClaimedEventObject {
  bountyId: string;
  bountyAddress: string;
  organization: string;
  closer: string;
  payoutTime: BigNumber;
  tokenAddress: string;
  volume: BigNumber;
}
export type TokenBalanceClaimedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, BigNumber],
  TokenBalanceClaimedEventObject
>;

export type TokenBalanceClaimedEventFilter =
  TypedEventFilter<TokenBalanceClaimedEvent>;

export interface TokenDepositReceivedEventObject {
  depositId: string;
  bountyAddress: string;
  bountyId: string;
  organization: string;
  tokenAddress: string;
  receiveTime: BigNumber;
  sender: string;
  expiration: BigNumber;
  volume: BigNumber;
}
export type TokenDepositReceivedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ],
  TokenDepositReceivedEventObject
>;

export type TokenDepositReceivedEventFilter =
  TypedEventFilter<TokenDepositReceivedEvent>;

export interface IOpenQ extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpenQInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BountyClosed(string,address,string,address,uint256,string)"(
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      closer?: null,
      bountyClosedTime?: null,
      closerData?: null
    ): BountyClosedEventFilter;
    BountyClosed(
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      closer?: null,
      bountyClosedTime?: null,
      closerData?: null
    ): BountyClosedEventFilter;

    "BountyCreated(string,string,address,address,uint256)"(
      bountyId?: null,
      organization?: null,
      issuerAddress?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyMintTime?: null
    ): BountyCreatedEventFilter;
    BountyCreated(
      bountyId?: null,
      organization?: null,
      issuerAddress?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyMintTime?: null
    ): BountyCreatedEventFilter;

    "DepositExtended(bytes32,uint256)"(
      depositId?: null,
      newExpiration?: null
    ): DepositExtendedEventFilter;
    DepositExtended(
      depositId?: null,
      newExpiration?: null
    ): DepositExtendedEventFilter;

    "DepositRefunded(bytes32,string,address,string,uint256)"(
      depositId?: null,
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      refundTime?: null
    ): DepositRefundedEventFilter;
    DepositRefunded(
      depositId?: null,
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      refundTime?: null
    ): DepositRefundedEventFilter;

    "NFTDepositReceived(bytes32,address,string,string,address,uint256,address,uint256,uint256)"(
      depositId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyId?: null,
      organization?: null,
      tokenAddress?: null,
      receiveTime?: null,
      sender?: null,
      expiration?: null,
      tokenId?: null
    ): NFTDepositReceivedEventFilter;
    NFTDepositReceived(
      depositId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyId?: null,
      organization?: null,
      tokenAddress?: null,
      receiveTime?: null,
      sender?: null,
      expiration?: null,
      tokenId?: null
    ): NFTDepositReceivedEventFilter;

    "TokenBalanceClaimed(string,address,string,address,uint256,address,uint256)"(
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      closer?: null,
      payoutTime?: null,
      tokenAddress?: null,
      volume?: null
    ): TokenBalanceClaimedEventFilter;
    TokenBalanceClaimed(
      bountyId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      organization?: null,
      closer?: null,
      payoutTime?: null,
      tokenAddress?: null,
      volume?: null
    ): TokenBalanceClaimedEventFilter;

    "TokenDepositReceived(bytes32,address,string,string,address,uint256,address,uint256,uint256)"(
      depositId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyId?: null,
      organization?: null,
      tokenAddress?: null,
      receiveTime?: null,
      sender?: null,
      expiration?: null,
      volume?: null
    ): TokenDepositReceivedEventFilter;
    TokenDepositReceived(
      depositId?: null,
      bountyAddress?: PromiseOrValue<string> | null,
      bountyId?: null,
      organization?: null,
      tokenAddress?: null,
      receiveTime?: null,
      sender?: null,
      expiration?: null,
      volume?: null
    ): TokenDepositReceivedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
